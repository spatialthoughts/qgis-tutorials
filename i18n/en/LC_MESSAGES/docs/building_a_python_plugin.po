# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Ujaval Gandhi
# This file is distributed under the same license as the QGIS Tutorials and Tips package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: QGIS Tutorials\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-24 12:52+0000\n"
"PO-Revision-Date: 2019-03-29 06:43+0000\n"
"Last-Translator: Ujaval Gandhi <ujaval@spatialthoughts.com>\n"
"Language-Team: English (http://www.transifex.com/spatialthoughts/qgis-tutorials/language/en/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/building_a_python_plugin.rst:2
msgid "Building a Python Plugin"
msgstr "Building a Python Plugin"

#: ../../source/docs/building_a_python_plugin.rst:5
msgid ""
"A new version of this tutorial is available at "
":doc:`3/building_a_python_plugin`"
msgstr "A new version of this tutorial is available at :doc:`3/building_a_python_plugin`"

#: ../../source/docs/building_a_python_plugin.rst:7
msgid ""
"Plugins are a great way to extend the functionality of QGIS. You can write "
"plugins using Python that can range from adding a simple button to "
"sohpisticated toolkits. This tutorial will outline the process involved in "
"setting up your development environment, designing the user interface for a "
"plugin and writing code to interact with QGIS. Please review the "
":doc:`getting_started_with_pyqgis` tutorial to get familiar with the basics."
msgstr "Plugins are a great way to extend the functionality of QGIS. You can write plugins using Python that can range from adding a simple button to sohpisticated toolkits. This tutorial will outline the process involved in setting up your development environment, designing the user interface for a plugin and writing code to interact with QGIS. Please review the :doc:`getting_started_with_pyqgis` tutorial to get familiar with the basics."

#: ../../source/docs/building_a_python_plugin.rst:15
msgid "Overview of the Task"
msgstr "Overview of the Task"

#: ../../source/docs/building_a_python_plugin.rst:17
msgid ""
"We will develop a simple plugin called ``Save Attributes`` that will allow "
"users to pick a vector layer and write its attributes to a CSV file."
msgstr "We will develop a simple plugin called ``Save Attributes`` that will allow users to pick a vector layer and write its attributes to a CSV file."

#: ../../source/docs/building_a_python_plugin.rst:21
msgid "Get the Tools"
msgstr "Get the Tools"

#: ../../source/docs/building_a_python_plugin.rst:24
msgid "Qt Creator"
msgstr "Qt Creator"

#: ../../source/docs/building_a_python_plugin.rst:26
msgid ""
"`Qt <http://www.qt.io/>`_ is a software development framework that is used "
"to develop applications that run on Windows, Mac, Linux as well as various "
"mobile operating systems. QGIS itself is written using the Qt framework. For"
" plugin development, we will use an application called `Qt Creator "
"<http://doc.qt.io/qtcreator/index.html>`_ to design the interface for our "
"plugin."
msgstr "`Qt <http://www.qt.io/>`_ is a software development framework that is used to develop applications that run on Windows, Mac, Linux as well as various mobile operating systems. QGIS itself is written using the Qt framework. For plugin development, we will use an application called `Qt Creator <http://doc.qt.io/qtcreator/index.html>`_ to design the interface for our plugin."

#: ../../source/docs/building_a_python_plugin.rst:33
msgid ""
"Download and install the Qt Creator software from `SourgeForge "
"<http://sourceforge.net/projects/qtcreator.mirror/files/latest/download>`_"
msgstr "Download and install the Qt Creator software from `SourgeForge <http://sourceforge.net/projects/qtcreator.mirror/files/latest/download>`_"

#: ../../source/docs/building_a_python_plugin.rst:37
msgid "Python Bindings for Qt"
msgstr "Python Bindings for Qt"

#: ../../source/docs/building_a_python_plugin.rst:39
msgid ""
"Since we are developing the plugin in Python, we need to install the python "
"bindings for Qt. The method for installing these will depend on the platform"
" you are using. For building plugins we need the ``pyrcc4`` command-line "
"tool."
msgstr "Since we are developing the plugin in Python, we need to install the python bindings for Qt. The method for installing these will depend on the platform you are using. For building plugins we need the ``pyrcc4`` command-line tool."

#: ../../source/docs/building_a_python_plugin.rst:43
#: ../../source/docs/building_a_python_plugin.rst:78
#: ../../source/docs/building_a_python_plugin.rst:150
msgid "**Windows**"
msgstr "**Windows**"

#: ../../source/docs/building_a_python_plugin.rst:45
msgid ""
"Download the `OSGeo4W network installer <http://trac.osgeo.org/osgeo4w/>`_ "
"and choose :guilabel:`Express Desktop Install`. Install the package "
"``QGIS``. After installation, you will be able to access the ``pyrcc4`` tool"
" via the :guilabel:`OSGeo4W Shell`."
msgstr "Download the `OSGeo4W network installer <http://trac.osgeo.org/osgeo4w/>`_ and choose :guilabel:`Express Desktop Install`. Install the package ``QGIS``. After installation, you will be able to access the ``pyrcc4`` tool via the :guilabel:`OSGeo4W Shell`."

#: ../../source/docs/building_a_python_plugin.rst:50
#: ../../source/docs/building_a_python_plugin.rst:156
msgid "**Mac**"
msgstr "**Mac**"

#: ../../source/docs/building_a_python_plugin.rst:52
msgid ""
"Install the `Homebrew <http://brew.sh>`_ package manager. Install ``PyQt`` "
"package by running the following command:"
msgstr "Install the `Homebrew <http://brew.sh>`_ package manager. Install ``PyQt`` package by running the following command:"

#: ../../source/docs/building_a_python_plugin.rst:59
#: ../../source/docs/building_a_python_plugin.rst:162
msgid "**Linux**"
msgstr "**Linux**"

#: ../../source/docs/building_a_python_plugin.rst:61
msgid ""
"Depending on your distribution, find and install the ``python-qt4`` package."
" On Ubuntu and Debian-based distributions, you can run the following "
"command:"
msgstr "Depending on your distribution, find and install the ``python-qt4`` package. On Ubuntu and Debian-based distributions, you can run the following command:"

#: ../../source/docs/building_a_python_plugin.rst:69
msgid "A Text Editor or a Python IDE"
msgstr "A Text Editor or a Python IDE"

#: ../../source/docs/building_a_python_plugin.rst:71
msgid ""
"Any kind of software development requires a good text editor. If you already"
" have a favorite text editor or an IDE (Integrated Development Environment),"
" you may use it for this tutorial. Otherwise, each platform offers a wide "
"variety of free or paid options for text editors. Choose the one that fits "
"your needs."
msgstr "Any kind of software development requires a good text editor. If you already have a favorite text editor or an IDE (Integrated Development Environment), you may use it for this tutorial. Otherwise, each platform offers a wide variety of free or paid options for text editors. Choose the one that fits your needs."

#: ../../source/docs/building_a_python_plugin.rst:76
msgid "This tutorial uses Notepad++ editor on Windows."
msgstr "This tutorial uses Notepad++ editor on Windows."

#: ../../source/docs/building_a_python_plugin.rst:80
msgid ""
"`Notepad++ <http://notepad-plus-plus.org/>`_ is a good free editor for "
"windows. Download and install the `Notepad++ editor <http://notepad-plus-"
"plus.org/repository/6.x/6.7.5/npp.6.7.5.Installer.exe>`_."
msgstr "`Notepad++ <http://notepad-plus-plus.org/>`_ is a good free editor for windows. Download and install the `Notepad++ editor <http://notepad-plus-plus.org/repository/6.x/6.7.5/npp.6.7.5.Installer.exe>`_."

#: ../../source/docs/building_a_python_plugin.rst:86
msgid ""
"If you are using Notepad++, makes sure to check :guilabel:`Replace by space`"
" at  :menuselection:`Settings --> Preferences --> Tab Settings`. Python is "
"very sensitive about whitespace and this setting will ensure tabs and spaces"
" are treated properly."
msgstr "If you are using Notepad++, makes sure to check :guilabel:`Replace by space` at  :menuselection:`Settings --> Preferences --> Tab Settings`. Python is very sensitive about whitespace and this setting will ensure tabs and spaces are treated properly."

#: ../../source/docs/building_a_python_plugin.rst:93
msgid "Plugin Builder plugin"
msgstr "Plugin Builder plugin"

#: ../../source/docs/building_a_python_plugin.rst:95
msgid ""
"There is a helpful QGIS plugin named ``Plugin Builder`` which creates all "
"the necessary files and the boilerplate code for a plugin. Find and install "
"the ``Plugin Builder`` plugin. See :doc:`using_plugins` for more details on "
"how to install plugins."
msgstr "There is a helpful QGIS plugin named ``Plugin Builder`` which creates all the necessary files and the boilerplate code for a plugin. Find and install the ``Plugin Builder`` plugin. See :doc:`using_plugins` for more details on how to install plugins."

#: ../../source/docs/building_a_python_plugin.rst:101
msgid "Plugins Reloader plugin"
msgstr "Plugins Reloader plugin"

#: ../../source/docs/building_a_python_plugin.rst:103
msgid ""
"This is another helper plugin which allows iterative development of plugins."
" Using this plugin, you can change your plugin code and have it reflected in"
" QGIS without having to restart QGIS every time. Find and install the "
"``Plugin Reloader`` plugin. See :doc:`using_plugins` for more details on how"
" to install plugins."
msgstr "This is another helper plugin which allows iterative development of plugins. Using this plugin, you can change your plugin code and have it reflected in QGIS without having to restart QGIS every time. Find and install the ``Plugin Reloader`` plugin. See :doc:`using_plugins` for more details on how to install plugins."

#: ../../source/docs/building_a_python_plugin.rst:111
msgid ""
"Plugin Reloader is an experimental plugin. Make sure you have checked "
":guilabel:`Show also experimental plugins` in :guilabel:`Plugin Manager` "
"settings if you cannot find it."
msgstr "Plugin Reloader is an experimental plugin. Make sure you have checked :guilabel:`Show also experimental plugins` in :guilabel:`Plugin Manager` settings if you cannot find it."

#: ../../source/docs/building_a_python_plugin.rst:116
msgid "Procedure"
msgstr "Procedure"

#: ../../source/docs/building_a_python_plugin.rst:118
msgid ""
"Open QGIS. Go to :menuselection:`Plugins --> Plugin Builder --> Plugin "
"Builder`."
msgstr "Open QGIS. Go to :menuselection:`Plugins --> Plugin Builder --> Plugin Builder`."

#: ../../source/docs/building_a_python_plugin.rst:124
msgid ""
"You will see the :guilabel:`QGIS Plugin Builder` dialog with a form. You can"
" fill the form with details relating to our plugin. The :guilabel:`Class "
"name` will be the name of the Python Class containing the logic of the "
"plugin. This will also be the name of the folder containing all the plugin "
"files. Enter ``SaveAttributes`` as the class name. The :guilabel:`Plugin "
"name` is the name under which your plugin will appear in the "
":guilabel:`Plugin Manager`. Enter the name as ``Save Attributes``. Add a "
"description in the :guilabel:`Description` field. The :guilabel:`Module "
"name` will be the name of the main python file for the plugin. Enter it as "
"``save_attributes``. Leave the version numbers as they are. The "
":guilabel:`Text for menu item` value will be how the users will find your "
"plugin in QGIS menu. Enter it as ``Save Attributes as CSV``. Enter your name"
" and email address in the appropriate fields. The :guilabel:`Menu`  field "
"will decide where your plugin item is added in QGIS. Since our plugin is for"
" vector data, select ``Vector``. Check the :guilabel:`Flag the plugin as "
"experimental` box at the bottom. Click :guilabel:`OK`."
msgstr "You will see the :guilabel:`QGIS Plugin Builder` dialog with a form. You can fill the form with details relating to our plugin. The :guilabel:`Class name` will be the name of the Python Class containing the logic of the plugin. This will also be the name of the folder containing all the plugin files. Enter ``SaveAttributes`` as the class name. The :guilabel:`Plugin name` is the name under which your plugin will appear in the :guilabel:`Plugin Manager`. Enter the name as ``Save Attributes``. Add a description in the :guilabel:`Description` field. The :guilabel:`Module name` will be the name of the main python file for the plugin. Enter it as ``save_attributes``. Leave the version numbers as they are. The :guilabel:`Text for menu item` value will be how the users will find your plugin in QGIS menu. Enter it as ``Save Attributes as CSV``. Enter your name and email address in the appropriate fields. The :guilabel:`Menu`  field will decide where your plugin item is added in QGIS. Since our plugin is for vector data, select ``Vector``. Check the :guilabel:`Flag the plugin as experimental` box at the bottom. Click :guilabel:`OK`."

#: ../../source/docs/building_a_python_plugin.rst:144
msgid ""
"Next, you will be prompted to choose a directory for your plugin. You need "
"to browse to the QGIS python plugin directory on your computer and select "
":guilabel:`Select Folder`. Typically, a ``.qgis2/`` directory is located in "
"your home directory. The ``plugin`` folder location will depend on your "
"platform as follows: (Replace ``username`` with your login name)"
msgstr "Next, you will be prompted to choose a directory for your plugin. You need to browse to the QGIS python plugin directory on your computer and select :guilabel:`Select Folder`. Typically, a ``.qgis2/`` directory is located in your home directory. The ``plugin`` folder location will depend on your platform as follows: (Replace ``username`` with your login name)"

#: ../../source/docs/building_a_python_plugin.rst:171
msgid ""
"You will see a confirmation dialog once your plugin template is created. "
"Note the path to the plugin folder."
msgstr "You will see a confirmation dialog once your plugin template is created. Note the path to the plugin folder."

#: ../../source/docs/building_a_python_plugin.rst:177
msgid ""
"Before we can use the newly created plugin, we need to compile the "
"``resources.qrc`` file that was created by Plugin Builder. Launch the "
":guilabel:`OSGeo4W Shell` on windows or a terminal on Mac or Linux."
msgstr "Before we can use the newly created plugin, we need to compile the ``resources.qrc`` file that was created by Plugin Builder. Launch the :guilabel:`OSGeo4W Shell` on windows or a terminal on Mac or Linux."

#: ../../source/docs/building_a_python_plugin.rst:184
msgid ""
"Browse to the plugin directory where the output of ``Plugin Builder`` was "
"created. You can use the ``cd`` command followed by the path to the "
"directory."
msgstr "Browse to the plugin directory where the output of ``Plugin Builder`` was created. You can use the ``cd`` command followed by the path to the directory."

#: ../../source/docs/building_a_python_plugin.rst:195
msgid ""
"Once you are in the directory, type ``make``. This will run the ``pyrcc4`` "
"command that we had installed as part of Qt bindings for Python."
msgstr "Once you are in the directory, type ``make``. This will run the ``pyrcc4`` command that we had installed as part of Qt bindings for Python."

#: ../../source/docs/building_a_python_plugin.rst:205
msgid ""
"Now we are ready to have a first look at the brand new plugin we created. "
"Close QGIS and launch it again. Go to :menuselection:`Plugins --> Manage and"
" Install plugins` and enable the ``Save Attributes`` plugin in the "
":guilabel:`Installed` tab. You will notice that there is a new icon in the "
"toolbar and a new menu entry under :menuselection:`Vector --> Save "
"Attributes --> Save Attributes as CSV``. Select it to launch the plugin "
"dialog."
msgstr "Now we are ready to have a first look at the brand new plugin we created. Close QGIS and launch it again. Go to :menuselection:`Plugins --> Manage and Install plugins` and enable the ``Save Attributes`` plugin in the :guilabel:`Installed` tab. You will notice that there is a new icon in the toolbar and a new menu entry under :menuselection:`Vector --> Save Attributes --> Save Attributes as CSV``. Select it to launch the plugin dialog."

#: ../../source/docs/building_a_python_plugin.rst:216
msgid ""
"You will notice a new blank dialog named :guilabel:`Save Attributes`. Close "
"this dialog."
msgstr "You will notice a new blank dialog named :guilabel:`Save Attributes`. Close this dialog."

#: ../../source/docs/building_a_python_plugin.rst:222
msgid ""
"We will now design our dialog box and add some user interface elements to "
"it. Open the ``Qt Creator`` program and to to :guilabel:`File --> Open File "
"or Project...`."
msgstr "We will now design our dialog box and add some user interface elements to it. Open the ``Qt Creator`` program and to to :guilabel:`File --> Open File or Project...`."

#: ../../source/docs/building_a_python_plugin.rst:229
msgid ""
"Browse to the plugin directory and select the "
"``save_attributes_dialog_base.ui`` file. Click :guilabel:`Open`."
msgstr "Browse to the plugin directory and select the ``save_attributes_dialog_base.ui`` file. Click :guilabel:`Open`."

#: ../../source/docs/building_a_python_plugin.rst:235
msgid ""
"You will see the blank dialog from the plugin. You can drag-and-drop "
"elements from the left-hand panel on the dialog. We will add a "
":guilabel:`Combo Box` type of :guilabel:`Input Widget`. Drag it to the "
"plugin dialog."
msgstr "You will see the blank dialog from the plugin. You can drag-and-drop elements from the left-hand panel on the dialog. We will add a :guilabel:`Combo Box` type of :guilabel:`Input Widget`. Drag it to the plugin dialog."

#: ../../source/docs/building_a_python_plugin.rst:243
msgid ""
"Resize the combo box and adjust its size. Now drag a :guilabel:`Label` type "
":guilabel:`Display Widget` on the dialog."
msgstr "Resize the combo box and adjust its size. Now drag a :guilabel:`Label` type :guilabel:`Display Widget` on the dialog."

#: ../../source/docs/building_a_python_plugin.rst:249
msgid "Click on the label text and enter ``Select a layer``."
msgstr "Click on the label text and enter ``Select a layer``."

#: ../../source/docs/building_a_python_plugin.rst:254
msgid ""
"Save this file by going to :menuselection:`File --> Save "
"save_attributes_dialog_base.ui`. Note the name of the combo box object is "
"``comboBox``. To interact with this object using python code, we will have "
"to refer to it by this name."
msgstr "Save this file by going to :menuselection:`File --> Save save_attributes_dialog_base.ui`. Note the name of the combo box object is ``comboBox``. To interact with this object using python code, we will have to refer to it by this name."

#: ../../source/docs/building_a_python_plugin.rst:262
msgid ""
"Let's reload our plugin so we can see the changes in the dialog window. Go "
"to :menuselection:`Plugin --> Plugin Reloader --> Choose a plugin to be "
"reloaded`."
msgstr "Let's reload our plugin so we can see the changes in the dialog window. Go to :menuselection:`Plugin --> Plugin Reloader --> Choose a plugin to be reloaded`."

#: ../../source/docs/building_a_python_plugin.rst:269
msgid ""
"Select ``SaveAttributes`` in the :guilabel:`Configure Plugin reloader` "
"dialog."
msgstr "Select ``SaveAttributes`` in the :guilabel:`Configure Plugin reloader` dialog."

#: ../../source/docs/building_a_python_plugin.rst:275
msgid ""
"Now click the :guilabel:`Save Attributes as CSV` button. You will see the "
"newly designed dialog box."
msgstr "Now click the :guilabel:`Save Attributes as CSV` button. You will see the newly designed dialog box."

#: ../../source/docs/building_a_python_plugin.rst:281
msgid ""
"Let's add some logic to the plugin that will populate the combo box with the"
" layers loaded in QGIS. Go to the plugin directory and load the file "
"``save_attributes.py`` in a text editor. Scroll down and find the "
"``run(self)`` method. This method will be called when you click the toolbar "
"button or select the plugin menu item. Add the following code at the "
"beginning of the method. This code gets the layers loaded in QGIS and adds "
"it to the ``comboBox`` object from the plugin dialog."
msgstr "Let's add some logic to the plugin that will populate the combo box with the layers loaded in QGIS. Go to the plugin directory and load the file ``save_attributes.py`` in a text editor. Scroll down and find the ``run(self)`` method. This method will be called when you click the toolbar button or select the plugin menu item. Add the following code at the beginning of the method. This code gets the layers loaded in QGIS and adds it to the ``comboBox`` object from the plugin dialog."

#: ../../source/docs/building_a_python_plugin.rst:301
msgid ""
"Back in the main QGIS window, reload the plugin by going to "
":menuselection:`Plugins --> Plugin Reloader -->  Reload plugin: "
"SaveAttributes`. Alternatively, you can just press :kbd:`F5`. To test this "
"new functionality, we must load some layers in QGIS. After you load some "
"data, launch the plugin by going to :menuselection:`Vector --> Save "
"Attributes --> Save Attributes as CSV`."
msgstr "Back in the main QGIS window, reload the plugin by going to :menuselection:`Plugins --> Plugin Reloader -->  Reload plugin: SaveAttributes`. Alternatively, you can just press :kbd:`F5`. To test this new functionality, we must load some layers in QGIS. After you load some data, launch the plugin by going to :menuselection:`Vector --> Save Attributes --> Save Attributes as CSV`."

#: ../../source/docs/building_a_python_plugin.rst:311
msgid ""
"You will see that our combo box is now populated with the layer names that "
"are loaded in QGIS."
msgstr "You will see that our combo box is now populated with the layer names that are loaded in QGIS."

#: ../../source/docs/building_a_python_plugin.rst:317
msgid ""
"Let's add remaining user interface elements. Switch back to ``Qt Creator`` "
"and load the ``save_attributes_dialog_base.ui`` file. Add a ``Label`` "
":guilabel:`Display Widget` and change the text to ``Select output file``. "
"Add a ``LineEdit`` type :guilabel:`Input Widget` that will show the output "
"file path that the user has chosen. Next, add a ``Push Button`` type "
":guilabel:`Button` and change the button label to ``...``. Note the object "
"names of the widgets that we will have to use to interact with them. Save "
"the file."
msgstr "Let's add remaining user interface elements. Switch back to ``Qt Creator`` and load the ``save_attributes_dialog_base.ui`` file. Add a ``Label`` :guilabel:`Display Widget` and change the text to ``Select output file``. Add a ``LineEdit`` type :guilabel:`Input Widget` that will show the output file path that the user has chosen. Next, add a ``Push Button`` type :guilabel:`Button` and change the button label to ``...``. Note the object names of the widgets that we will have to use to interact with them. Save the file."

#: ../../source/docs/building_a_python_plugin.rst:329
msgid ""
"We will now add python code to open a file browser when the user clicks the "
"``...`` push button and show the select path in the line edit widget. Open "
"the ``save_attributes.py`` file in a text editor. Add ``QFileDialog`` to our"
" list of imports at the top of the file."
msgstr "We will now add python code to open a file browser when the user clicks the ``...`` push button and show the select path in the line edit widget. Open the ``save_attributes.py`` file in a text editor. Add ``QFileDialog`` to our list of imports at the top of the file."

#: ../../source/docs/building_a_python_plugin.rst:337
msgid ""
"Add a new method called ``select_output_file`` with the following code. This"
" code will open a file browser and populate the line edit widget with the "
"path of the file that the user chose."
msgstr "Add a new method called ``select_output_file`` with the following code. This code will open a file browser and populate the line edit widget with the path of the file that the user chose."

#: ../../source/docs/building_a_python_plugin.rst:350
msgid ""
"Now we need to add code so that when the `...` button is clicked, "
"``select_output_file`` method is called. Scroll up to the ``__init__`` "
"method and add the following lines at the bottom. This code will clear the "
"previously loaded text (if any) in the line edit widget and also connect the"
" ``select_output_file`` method to the ``clicked`` signal of the push button "
"widget."
msgstr "Now we need to add code so that when the `...` button is clicked, ``select_output_file`` method is called. Scroll up to the ``__init__`` method and add the following lines at the bottom. This code will clear the previously loaded text (if any) in the line edit widget and also connect the ``select_output_file`` method to the ``clicked`` signal of the push button widget."

#: ../../source/docs/building_a_python_plugin.rst:365
msgid ""
"Back in QGIS, reload the plugin and open the :guilabel:`Save Attributes`` "
"dialog. If all went fine, you will be able to click the ``...`` button and "
"select an output text file from your disk."
msgstr "Back in QGIS, reload the plugin and open the :guilabel:`Save Attributes`` dialog. If all went fine, you will be able to click the ``...`` button and select an output text file from your disk."

#: ../../source/docs/building_a_python_plugin.rst:372
msgid ""
"When you click :guilabel:`OK` on the plugin dialog, nothing happens. That is"
" because we have not added the logic to pull attribute information from the "
"layer and write it to the text file. We now have all the pieces in place to "
"do just that. Find the place in the ``run`` method where it says ``pass``.  "
"Replace it with the code below. The explanation for this code can be found "
"in :doc:`getting_started_with_pyqgis`."
msgstr "When you click :guilabel:`OK` on the plugin dialog, nothing happens. That is because we have not added the logic to pull attribute information from the layer and write it to the text file. We now have all the pieces in place to do just that. Find the place in the ``run`` method where it says ``pass``.  Replace it with the code below. The explanation for this code can be found in :doc:`getting_started_with_pyqgis`."

#: ../../source/docs/building_a_python_plugin.rst:398
msgid ""
"Now our plugin is ready. Reload the plugin and try it out. You will find "
"that the output text file you chose will have the attributes from the vector"
" layer. You can zip the plugin directory and share it with your users. They "
"can unzip the contents to their plugin directory and try out your plugin. If"
" this was a real plugin, you would upload it to the `QGIS Plugin Repository "
"<https://plugins.qgis.org/>`_ so that all QGIS users will be able to find "
"and download your plugin."
msgstr "Now our plugin is ready. Reload the plugin and try it out. You will find that the output text file you chose will have the attributes from the vector layer. You can zip the plugin directory and share it with your users. They can unzip the contents to their plugin directory and try out your plugin. If this was a real plugin, you would upload it to the `QGIS Plugin Repository <https://plugins.qgis.org/>`_ so that all QGIS users will be able to find and download your plugin."

#: ../../source/docs/building_a_python_plugin.rst:408
msgid ""
"This plugin is for demonstration purpose only. Do not publish this plugin or"
" upload it to the QGIS plugin repository."
msgstr "This plugin is for demonstration purpose only. Do not publish this plugin or upload it to the QGIS plugin repository."

#: ../../source/docs/building_a_python_plugin.rst:411
msgid "Below is the full ``save_attributes.py`` file as a reference."
msgstr "Below is the full ``save_attributes.py`` file as a reference."
